---
title: "EPL Odds"
execute:
  echo: false
  message: false
  warning: false
author: "James Brown"
date: "`r Sys.Date()`"
format:
  html:
    df-print: kable
    max-width: 100%
    theme: cosmo
    self-contained: true
    toc: true
    toc-depth: 3
    fig-width: 8
    fig-height: 6
editor: source
---

**Last Updated: `r format(Sys.time(), "%I:%M %p")`**

## Arbs

```{r}
library(shiny)
library(bslib)
library(gridlayout)
library(DT)
library(tidyverse)

#===============================================================================
# Load in data
#===============================================================================

# Load in team stats
epl_team_stats <- read_rds("../Data/epl_team_stats.rds")
serie_a_team_stats <- read_rds("../Data/serie_a_team_stats.rds")

# Combine team stats
all_team_stats <- bind_rows(epl_team_stats, serie_a_team_stats)

# Create Match stats table

# Load in player stats
epl_player_stats <- read_rds("../Data/epl_player_stats.rds")

# Unique players, events, and teams
unique_players <- epl_player_stats$Player |> unique() |> sort()
unique_events <- c("EPL", "Serie A")
unique_teams <- all_team_stats$Team |> unique() |> sort()
unique_seasons <- all_team_stats$Season |> unique() |> sort()

#===============================================================================
# Read in scraped odds
#===============================================================================

# Head to head
head_to_head_data <-
    read_rds("../Data/processed_odds/h2h_data.rds") |> 
    mutate(competition = "EPL") |> 
    group_by(match, competition, market_name) |> 
    mutate(CV = sd(home_win) / abs(mean(home_win))) |>
    mutate(CV = round(CV, 2)) |> 
    ungroup()

# Total Goals
total_goals_data <-
    read_rds("../Data/processed_odds/total_goals_data.rds") |> 
    mutate(competition = "EPL") |> 
    group_by(match, competition, market_name, line) |>
    mutate(CV = sd(over_price) / abs(mean(over_price))) |>
    mutate(CV = round(CV, 2)) |> 
    ungroup()

# Player goals
player_goals_data <-
    read_rds("../Data/processed_odds/player_goals_data.rds") |> 
    mutate(competition = "EPL") |> 
    group_by(match, competition, market_name, line, player_name) |>
    mutate(CV = sd(over_price) / abs(mean(over_price))) |>
    mutate(CV = round(CV, 2)) |> 
    ungroup()

# Team goals
team_goals_data <-
    read_rds("../Data/processed_odds/team_goals_data.rds") |> 
    mutate(competition = "EPL") |> 
    group_by(match, competition, market_name, line, team) |>
    mutate(CV = sd(over_price) / abs(mean(over_price))) |>
    mutate(CV = round(CV, 2)) |> 
    ungroup()

# Both teams to score
btts_data <-
    read_rds("../Data/processed_odds/btts_data.rds") |> 
    mutate(competition = "EPL") |> 
    group_by(match, competition, market_name) |>
    mutate(CV = sd(yes_price) / abs(mean(yes_price))) |>
    mutate(CV = round(CV, 2)) |> 
    ungroup()

# Player Shots
player_shots_data <-
    read_rds("../Data/processed_odds/player_shots_data.rds") |> 
    mutate(competition = "EPL") |> 
    group_by(match, competition, market_name, line, player_name) |>
    mutate(CV = sd(over_price) / abs(mean(over_price))) |>
    mutate(CV = round(CV, 2)) |> 
    ungroup()

# Player Shots On Target
player_shots_on_target_data <-
    read_rds("../Data/processed_odds/player_shots_on_target_data.rds") |> 
    mutate(competition = "EPL") |> 
    group_by(match, competition, market_name, line, player_name) |>
    mutate(CV = sd(over_price) / abs(mean(over_price))) |>
    mutate(CV = round(CV, 2)) |> 
    ungroup()

# Player Tackles
player_tackles_data <-
    read_rds("../Data/processed_odds/player_tackles_data.rds") |> 
    mutate(competition = "EPL") |> 
    group_by(match, competition, market_name, line, player_name) |>
    mutate(CV = sd(over_price) / abs(mean(over_price))) |>
    mutate(CV = round(CV, 2)) |> 
    ungroup()

# Player Assists
player_assists_data <-
    read_rds("../Data/processed_odds/player_assists_data.rds") |> 
    mutate(competition = "EPL") |> 
    group_by(match, competition, market_name, line, player_name) |>
    mutate(CV = sd(over_price) / abs(mean(over_price))) |>
    mutate(CV = round(CV, 2)) |> 
    ungroup()

#===============================================================================
# Create wide mode for odds tables
#===============================================================================

# Head to head------------------------------------------------------------------

# Best Home Odds
head_to_head_best_home_odds <-
    head_to_head_data |>
    arrange(match, desc(home_win)) |> 
    group_by(match) |> 
    slice_head(n = 1) |> 
    select(-CV, -draw, -away_win, -margin) |> 
    rename(home_agency = agency)

# Best Draw Odds
head_to_head_best_draw_odds <-
    head_to_head_data |>
    arrange(match, desc(draw)) |> 
    group_by(match) |> 
    slice_head(n = 1) |> 
    select(-CV, -home_win, -away_win, -margin) |> 
    rename(draw_agency = agency)

# Best Away Odds
head_to_head_best_away_odds <-
    head_to_head_data |>
    arrange(match, desc(away_win)) |> 
    group_by(match) |> 
    slice_head(n = 1) |> 
    select(-CV, -draw, -home_win, -margin) |> 
    rename(away_agency = agency)

head_to_head_wide <-
    head_to_head_best_home_odds |>
    left_join(head_to_head_best_draw_odds) |>
    left_join(head_to_head_best_away_odds) |> 
    relocate(home_win, home_agency, draw, draw_agency, away_win, away_agency, .after = competition) |> 
    mutate(margin = 1/home_win + 1/draw + 1/away_win) |>
    mutate(margin = round(margin, 3)) |> 
    arrange(margin)

# Total Goals-------------------------------------------------------------------

# Best Over Odds
total_goals_best_over_odds <-
    total_goals_data |>
    arrange(match, line, desc(over_price)) |> 
    group_by(match, line) |> 
    slice_head(n = 1) |> 
    select(-CV, -under_price) |> 
    rename(over_agency = agency)

# Best Under Odds
total_goals_best_under_odds <-
    total_goals_data |>
    arrange(match, line, desc(under_price)) |> 
    group_by(match, line) |> 
    slice_head(n = 1) |> 
    select(-CV, -over_price) |> 
    rename(under_agency = agency)

total_goals_wide <-
    total_goals_best_over_odds |>
    left_join(total_goals_best_under_odds) |> 
    relocate(over_price, over_agency, under_price, under_agency, .after = competition) |> 
    mutate(margin = 1/over_price + 1/under_price) |>
    mutate(margin = round(margin, 3)) |> 
    arrange(margin) |> 
    relocate(margin, .after = under_agency)

# Team Goals--------------------------------------------------------------------

# Best Over Odds
team_goals_best_over_odds <-
    team_goals_data |>
    arrange(match, line, team, desc(over_price)) |> 
    group_by(match, line, team) |> 
    slice_head(n = 1) |> 
    select(-CV, -under_price) |> 
    rename(over_agency = agency)

# Best Under Odds
team_goals_best_under_odds <-
    team_goals_data |>
    arrange(match, line, team, desc(under_price)) |> 
    group_by(match, line, team) |> 
    slice_head(n = 1) |> 
    select(-CV, -over_price) |> 
    rename(under_agency = agency)

team_goals_wide <-
    team_goals_best_over_odds |>
    left_join(team_goals_best_under_odds) |> 
    relocate(over_price, over_agency, under_price, under_agency, .after = competition) |> 
    mutate(margin = 1/over_price + 1/under_price) |>
    mutate(margin = round(margin, 3)) |>
    arrange(margin) |> 
    relocate(margin, .after = under_agency)

# Both Teams to Score-----------------------------------------------------------

# Best Yes Odds
btts_best_yes_odds <-
    btts_data |>
    arrange(match, desc(yes_price)) |> 
    group_by(match) |> 
    slice_head(n = 1) |> 
    select(-CV, -no_price) |> 
    rename(yes_agency = agency)

# Best No Odds
btts_best_no_odds <-
    btts_data |>
    arrange(match, desc(no_price)) |> 
    group_by(match) |> 
    slice_head(n = 1) |> 
    select(-CV, -yes_price) |> 
    rename(no_agency = agency)

btts_wide <-
    btts_best_yes_odds |>
    left_join(btts_best_no_odds) |> 
    relocate(yes_price, yes_agency, no_price, no_agency, .after = competition) |> 
    mutate(margin = 1/yes_price + 1/no_price) |>
    mutate(margin = round(margin, 3)) |> 
    arrange(margin) |> 
    relocate(margin, .after = no_agency)

# Player Shots------------------------------------------------------------------

# Best Over Odds
player_shots_best_over_odds <-
    player_shots_data |>
    arrange(match, line, player_name, desc(over_price)) |> 
    group_by(match, line, player_name) |> 
    slice_head(n = 1) |> 
    select(-CV, -under_price) |> 
    rename(over_agency = agency)

# Best Under Odds
player_shots_best_under_odds <-
    player_shots_data |>
    filter(!is.na(under_price)) |> 
    arrange(match, line, player_name, desc(under_price)) |> 
    group_by(match, line, player_name) |> 
    slice_head(n = 1) |> 
    select(-CV, -over_price) |> 
    rename(under_agency = agency)

player_shots_wide <-
    player_shots_best_over_odds |>
    inner_join(player_shots_best_under_odds) |> 
    relocate(over_price, over_agency, under_price, under_agency, .after = competition) |> 
    mutate(margin = 1/over_price + 1/under_price) |>
    mutate(margin = round(margin, 3)) |> 
    arrange(margin) |> 
    relocate(margin, .after = under_agency)

# Player Shots On Target--------------------------------------------------------

# Best Over Odds
player_shots_on_target_best_over_odds <-
    player_shots_on_target_data |>
    arrange(match, line, player_name, desc(over_price)) |> 
    group_by(match, line, player_name) |> 
    slice_head(n = 1) |> 
    select(-CV, -under_price) |> 
    rename(over_agency = agency)

# Best Under Odds
player_shots_on_target_best_under_odds <-
    player_shots_on_target_data |>
    filter(!is.na(under_price)) |> 
    arrange(match, line, player_name, desc(under_price)) |> 
    group_by(match, line, player_name) |> 
    slice_head(n = 1) |> 
    select(-CV, -over_price) |> 
    rename(under_agency = agency)

player_shots_on_target_wide <-
    player_shots_on_target_best_over_odds |>
    inner_join(player_shots_on_target_best_under_odds) |> 
    relocate(over_price, over_agency, under_price, under_agency, .after = competition) |> 
    mutate(margin = 1/over_price + 1/under_price) |>
    mutate(margin = round(margin, 3)) |> 
    arrange(margin) |> 
    relocate(margin, .after = under_agency)

# Player Tackles----------------------------------------------------------------

# Best Over Odds
player_tackles_best_over_odds <-
    player_tackles_data |>
    arrange(match, line, player_name, desc(over_price)) |> 
    group_by(match, line, player_name) |> 
    slice_head(n = 1) |> 
    select(-CV, -under_price) |> 
    rename(over_agency = agency)

# Best Under Odds
player_tackles_best_under_odds <-
    player_tackles_data |>
    filter(!is.na(under_price)) |> 
    arrange(match, line, player_name, desc(under_price)) |> 
    group_by(match, line, player_name) |> 
    slice_head(n = 1) |> 
    select(-CV, -over_price) |> 
    rename(under_agency = agency)

player_tackles_wide <-
    player_tackles_best_over_odds |>
    inner_join(player_tackles_best_under_odds) |> 
    relocate(over_price, over_agency, under_price, under_agency, .after = competition) |> 
    mutate(margin = 1/over_price + 1/under_price) |>
    mutate(margin = round(margin, 3)) |> 
    arrange(margin) |> 
    relocate(margin, .after = under_agency)

# Player Assists----------------------------------------------------------------

# Best Over Odds
player_assists_best_over_odds <-
    player_assists_data |>
    arrange(match, line, player_name, desc(over_price)) |> 
    group_by(match, line, player_name) |> 
    slice_head(n = 1) |> 
    select(-CV, -under_price) |> 
    rename(over_agency = agency)

# Best Under Odds
player_assists_best_under_odds <-
    player_assists_data |>
    filter(!is.na(under_price)) |> 
    arrange(match, line, player_name, desc(under_price)) |> 
    group_by(match, line, player_name) |> 
    slice_head(n = 1) |> 
    select(-CV, -over_price) |> 
    rename(under_agency = agency)

player_assists_wide <- 
    player_assists_best_over_odds |>
    inner_join(player_assists_best_under_odds) |> 
    relocate(over_price, over_agency, under_price, under_agency, .after = competition) |> 
    mutate(margin = 1/over_price + 1/under_price) |>
    mutate(margin = round(margin, 3)) |> 
    arrange(margin) |> 
    relocate(margin, .after = under_agency)
```

```{r}
#===============================================================================
# Create outlier analysis function
#===============================================================================

calculate_outliers <- function(data, price_col, grouping_vars) {
  data |>
    group_by(across(all_of(grouping_vars))) |>
    filter(n() >= 2) |>  # Need at least 2 agencies for comparison
    mutate(probability = 1 / .data[[price_col]]) |>
    filter(n() >= 2) |>  # Ensure we have multiple agencies
    summarise(
      num_agencies = n(),
      best_odds = max(.data[[price_col]]),
      best_agency = agency[which.max(.data[[price_col]])],
      best_prob = 1 / best_odds,
      second_best_odds = sort(.data[[price_col]], decreasing = TRUE)[2],
      second_best_agency = agency[.data[[price_col]] == second_best_odds][1],
      second_best_prob = 1 / second_best_odds,
      prob_difference = second_best_prob - best_prob,  # Higher probability minus lower probability
      .groups = "drop"
    ) |>
    filter(prob_difference > 0) |>
    arrange(desc(prob_difference)) |>
    mutate(prob_difference = round(prob_difference, 4))
}

#===============================================================================
# Calculate outliers for each market type
#===============================================================================

# Head to head outliers
h2h_home_outliers <- calculate_outliers(
  head_to_head_data, "home_win", 
  c("match", "competition", "market_name")
) |> mutate(market_type = "Home Win", outcome = "home_win")

h2h_draw_outliers <- calculate_outliers(
  head_to_head_data, "draw", 
  c("match", "competition", "market_name")
) |> mutate(market_type = "Draw", outcome = "draw")

h2h_away_outliers <- calculate_outliers(
  head_to_head_data, "away_win", 
  c("match", "competition", "market_name")
) |> mutate(market_type = "Away Win", outcome = "away_win")

# Total goals outliers
total_goals_over_outliers <- calculate_outliers(
  total_goals_data, "over_price", 
  c("match", "competition", "market_name", "line")
) |> mutate(market_type = "Total Goals Over", outcome = paste("Over", line))

total_goals_under_outliers <- calculate_outliers(
  total_goals_data, "under_price", 
  c("match", "competition", "market_name", "line")
) |> mutate(market_type = "Total Goals Under", outcome = paste("Under", line))

# BTTS outliers
btts_yes_outliers <- calculate_outliers(
  btts_data, "yes_price", 
  c("match", "competition", "market_name")
) |> mutate(market_type = "BTTS Yes", outcome = "yes")

btts_no_outliers <- calculate_outliers(
  btts_data, "no_price", 
  c("match", "competition", "market_name")
) |> mutate(market_type = "BTTS No", outcome = "no")

# Player goals outliers
player_goals_over_outliers <- calculate_outliers(
  player_goals_data, "over_price", 
  c("match", "competition", "market_name", "line", "player_name")
) |> mutate(market_type = "Player Goals Over", outcome = paste(player_name, "Over", line))

# Team goals outliers
team_goals_over_outliers <- calculate_outliers(
  team_goals_data, "over_price", 
  c("match", "competition", "market_name", "line", "team")
) |> mutate(market_type = "Team Goals Over", outcome = paste(team, "Over", line))

team_goals_under_outliers <- calculate_outliers(
  team_goals_data, "under_price", 
  c("match", "competition", "market_name", "line", "team")
) |> mutate(market_type = "Team Goals Under", outcome = paste(team, "Under", line))

# Player shots outliers
player_shots_over_outliers <- calculate_outliers(
  player_shots_data, "over_price", 
  c("match", "competition", "market_name", "line", "player_name")
) |> mutate(market_type = "Player Shots Over", outcome = paste(player_name, "Over", line))

# Player shots on target outliers
player_shots_on_target_over_outliers <- calculate_outliers(
  player_shots_on_target_data, "over_price", 
  c("match", "competition", "market_name", "line", "player_name")
) |> mutate(market_type = "Player SOT Over", outcome = paste(player_name, "Over", line))

# Player tackles outliers
player_tackles_over_outliers <- calculate_outliers(
  player_tackles_data, "over_price", 
  c("match", "competition", "market_name", "line", "player_name")
) |> mutate(market_type = "Player Tackles Over", outcome = paste(player_name, "Over", line))

# Player assists outliers
player_assists_over_outliers <- calculate_outliers(
  player_assists_data, "over_price", 
  c("match", "competition", "market_name", "line", "player_name")
) |> mutate(market_type = "Player Assists Over", outcome = paste(player_name, "Over", line))

# Combine only player prop outliers
all_outliers <- bind_rows(
  player_goals_over_outliers,
  player_shots_over_outliers, 
  player_shots_on_target_over_outliers,
  player_tackles_over_outliers, 
  player_assists_over_outliers
) |>
  select(match, market_type, outcome, num_agencies, best_odds, best_agency, 
         second_best_odds, second_best_agency, prob_difference) |>
  arrange(desc(prob_difference))

# Create bet365 reference outliers (where Bet365 is second best)
bet365_outliers <- all_outliers |>
  filter(second_best_agency == "Bet365") |>
  arrange(desc(prob_difference))

#===============================================================================
# Get all arbs
#===============================================================================

all_arbs <-
    player_assists_wide |>
    bind_rows(player_tackles_wide) |>
    bind_rows(player_shots_on_target_wide) |>
    bind_rows(player_shots_wide) |>
    filter(margin < 1) |> 
    arrange(margin) |> 
    mutate(margin = 100*(1 - margin)) |>
    mutate(margin = round(margin, 3))
```

::: {.panel-tabset}

## Arbitrage Opportunities

```{r}
if(nrow(all_arbs) > 0) {
  DT::datatable(
    all_arbs,
    options = list(
      pageLength = 20,
      scrollX = TRUE,
      dom = 'Bfrtip'
    ),
    rownames = FALSE
  )
} else {
  cat("No arbitrage opportunities found at this time.")
}
```

## Odds Outliers

```{r}
if(nrow(all_outliers) > 0) {
  DT::datatable(
    all_outliers |>
      rename(
        Match = match,
        `Market Type` = market_type,
        Outcome = outcome,
        `Agencies` = num_agencies,
        `Best Odds` = best_odds,
        `Best Agency` = best_agency,
        `Second Best Odds` = second_best_odds,
        `Second Best Agency` = second_best_agency,
        `Probability Difference` = prob_difference
      ),
    options = list(
      pageLength = 25,
      scrollX = TRUE,
      dom = 'Bfrtip',
      order = list(list(8, 'desc'))  # Sort by probability difference descending
    ),
    rownames = FALSE
  ) |>
    DT::formatRound(c('Best Odds', 'Second Best Odds'), 2) |>
    DT::formatRound('Probability Difference', 4)
} else {
  cat("No significant odds outliers found.")
}
```

## Bet365 Reference

```{r}
if(nrow(bet365_outliers) > 0) {
  DT::datatable(
    bet365_outliers |>
      rename(
        Match = match,
        `Market Type` = market_type,
        Outcome = outcome,
        `Agencies` = num_agencies,
        `Best Odds` = best_odds,
        `Best Agency` = best_agency,
        `Second Best Odds` = second_best_odds,
        `Second Best Agency` = second_best_agency,
        `Probability Difference` = prob_difference
      ),
    options = list(
      pageLength = 25,
      scrollX = TRUE,
      dom = 'Bfrtip',
      order = list(list(8, 'desc'))  # Sort by probability difference descending
    ),
    rownames = FALSE
  ) |>
    DT::formatRound(c('Best Odds', 'Second Best Odds'), 2) |>
    DT::formatRound('Probability Difference', 4)
} else {
  cat("No markets where Bet365 is the second best price.")
}
```

:::
